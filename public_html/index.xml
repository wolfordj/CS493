<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS 493</title>
    <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/</link>
    <description>Recent content on CS 493</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Authorization</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/1-authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/1-authorization/</guid>
      <description>Authorization Introduction Authorization, simply put, is the process of determining if the requester of a resource is allowed to access that resource. It is very important to not expand this definition any further than this. Doing so tends to open up a lot of security holes because people believe an authenticated request conveys more meaning or is somehow more complex than this. We will go into some detail on that shortly.</description>
    </item>
    
    <item>
      <title>Course Overview</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/1-course-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/1-course-overview/</guid>
      <description>Course Overview Introduction This course focuses on cloud API development. Those represent the two major components of the class: cloud based computing and API development. Cloud computing is basically computing that is done on distributed computers all over the world. Web API development involved creating applications that internet connected devices can interact with to accomplish certain tasks. The combination will mean that we are creating applications on cloud based computers which we can interact with over the internet.</description>
    </item>
    
    <item>
      <title>Deciding on URLs</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/1-url-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/1-url-selection/</guid>
      <description>Deciding on URLs Introduction In this section we return to the concept of resources representing URLs. We are going to talk in some more detail about what this means and how it is applied to a web application. Everything in this section will assume the data is stored as a simple JSON representation. For our example we are going to to use a lodging provider that has provides lodgings to guests.</description>
    </item>
    
    <item>
      <title>Docker Overview</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/1-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/1-intro/</guid>
      <description>Docker Overview Introduction Docker is an open-source container platform. It is probably todayâ€™s most popular way to containerize software. There are several tools that are part of the Docker platform, but the most essential one is a tool for simply creating and running containers.
Files, Images and Containers As we talk about Docker we are frequently going to be referencing Docker files, images and containers.
 Docker Files These are written specifications of a Docker image.</description>
    </item>
    
    <item>
      <title>Introduction to REST</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/1-rest-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/1-rest-intro/</guid>
      <description>Introduction to REST Introduction Representational State Transfer, much more commonly called REST is a very specific way of designing an API. The core concept of a REST Web API is that all the URLs identify resources, we will talk about this in some depth. Another important aspect of REST Web APIs is that they are stateless. The server does not store any information about the current state of a client.</description>
    </item>
    
    <item>
      <title>OAuth 2.0</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/2-oauth-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/2-oauth-2/</guid>
      <description>OAuth 2.0 Introduction OAuth 2.0 is an authorization protocol that is widely adapted among web services. If you want to access a users resources on differently platforms it is very, very likely that OAuth 2.0 will be the authentication protocol that is used to do so.
OAuth 2.0 This answer on StackOverflow is my favorite high-level description of OAuth 2.0.
 Flow Types Definitions  End-User This is typically the actual human involved in using an application.</description>
    </item>
    
    <item>
      <title>OAuth 2.0 Flow Example</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/3-oauth-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/6-security/3-oauth-example/</guid>
      <description>OAuth 2.0 Flow Example Introduction This module will show in its entirety the requests needed to complete an OAuth 2.0 login. These are the requests specific to Googles OAuth 2.0 Endpoint. They may look a bit different for different providers.
Getting the Access Code Send the End User to the OAuth Provider The first step is to direct the end user to the server via a GET request with the following parameters.</description>
    </item>
    
    <item>
      <title>OpenID Connect</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/1-authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/1-authorization/</guid>
      <description>OpenID Connect Introduction OpenID Connect is a authentication protocol that sits on top of the OAuth 2.0 Authorization protocol. There were multiple attempts to get OpenID to become an authentication standard but they generally failed as they tended to be more complex than standards like OAuth. So people started misusing OAuth to do authentication. In response OpenID Connect was created to give people an option to easily add authentication to the OAuth login flow.</description>
    </item>
    
    <item>
      <title>RESTful Links</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/1-internal-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/1-internal-links/</guid>
      <description>RESTful Links Introduction So far we have not thought too hard about all of the theory behind REST, and we don&amp;rsquo;t really need to. But an important piece we have not talked about and have thus far ignored is using hypermedia to help keep track of the application state.
Hypermedia is basically media which is linked to other media in a network of nodes. When you click on a URL in a webpage you are following a hyperlink.</description>
    </item>
    
    <item>
      <title>Advanced API Topics</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/1-request-specifics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/1-request-specifics/</guid>
      <description>Advanced API Topics Introduction At the point we should have a pretty good idea of how to generate the bulk of a typical request that is well formatted. But a lot of APIs go beyond this in terms of what they implement. Any good REST API should use status codes to communicate what is going on. In addition we will start paying attention to the Accept header and returning different sorts of data.</description>
    </item>
    
    <item>
      <title>Brewer&#39;s CAP Theorem</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/9-nosql/1-brewer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/9-nosql/1-brewer/</guid>
      <description>Brewer&amp;rsquo;s CAP Theorem Introduction This entire section can broadly be broken down into the following sentence: consistency, availability and partition fault tolerance, pick two. Eric Brewer proposed the theorem around 2000 and it is still very relevant. Historically relational databases tended to sacrifice availability to ensure data stayed strongly consistent. But many modern database systems to a different approach and that is what we are going to be looking at in this exploration.</description>
    </item>
    
    <item>
      <title>Cloud Computing Overview</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/2-cloud-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/2-cloud-overview/</guid>
      <description>Cloud Computing Overview Introduction In my personal experience there are not a whole lot of people who like the term &amp;ldquo;The Cloud&amp;rdquo; in the programming world. It is a great marketing tool, but it is often found in sentences which are also home to &amp;ldquo;incubating disruptive synergies&amp;rdquo; or &amp;ldquo;impactful value-added transformational e-future proofing&amp;rdquo;. It is fairly inspecific corporate jargon at this point. So lets clarify what thing(s) we might actually be talking about when we use the term &amp;ldquo;the cloud&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>HTTP Verbs</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/2-http-verbs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/2-http-verbs/</guid>
      <description>HTTP Verbs Introduction Verbs are the key to letting us interact with REST APIs. Before we had mentioned that https://example.com/class/1/student/5 might refer to a student with an ID of 5 enrolled in a class with an id of 1. Broadly speaking there are 4 major things we could do at this point. We could create a new thing and add it to the student, maybe an assignment for example. We could read the data about the student or the class in the database.</description>
    </item>
    
    <item>
      <title>Objects in Good API Design</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/2-oo-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/2-oo-practices/</guid>
      <description>Objects in Good API Design Introduction REST APIs lend themselves well to object oriented design. We are mainly using JavaScript in this class with Node.js, so it may not be quite as clean as it would be in something like C#, but the same principles will sill apply, so lets take a look!
What are the main Types? From the last section, we know there are broadly two sorts of things we will be dealing with.</description>
    </item>
    
    <item>
      <title>Pagination in REST</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/2-pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/2-pagination/</guid>
      <description>Pagination in REST Introduction There are many databases out there with hundreds of millions of records. It isn&amp;rsquo;t difficult to imagine that sending that many results at once could cause a variety of problems.
Most clients probably don&amp;rsquo;t want that many results. The may just want the first 100, or first 1,000.
Even if they did want that many results, they might not be able to process them all at once.</description>
    </item>
    
    <item>
      <title>Security Overview</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/2-security-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/2-security-overview/</guid>
      <description>Security Overview Introduction Security is a topic that is relevant to really all software, but I would argue it is exceptionally relevant to cloud software for a couple reasons. First is that often times other software providers will be using or relying on your software, so not only do you have to worry about your customers, but also the customers of other developers who might be using your software. The other aspect is that the whole point of the cloud is to have an application that is accessible from anywhere.</description>
    </item>
    
    <item>
      <title>API Introduction</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/3-api-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/3-api-overview/</guid>
      <description>API Introduction Introduction An Application Programming Interface or API is the mechanism by which a programmer might interface with an application. APIs exists at almost all levels of the software stack. Operating systems expose systems calls as an API that allows access to the lower levels of the operating system. C++ libraries expose APIs that allow you to access various data structures or features in the language. The standard template library is a good example of this.</description>
    </item>
    
    <item>
      <title>Authentication in Node</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/3-node-authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/7-more-security/3-node-authorization/</guid>
      <description>Authentication in Node Introduction This program demonstrates how one could go about implementing a simple authorization system in Node.js relying on a 3rd party to store usernames and passwords.
This particular flow is not as secure as it could be because the client needs to provide the username and password to my API for it to be relayed on to the Auth0 server. In a more robust flow they would be redirected to Auth0 via a browser.</description>
    </item>
    
    <item>
      <title>Basic Docker Use</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/2-basic-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/2-basic-use/</guid>
      <description>Basic Docker Use Introduction In this exploration we will go through the steps of running a docker container locally. This is a bit easier to work with because if anything goes wrong you will get the error messages on your local machine. If you are trying to directly deploy an image or Docker file to a cloud provider then you very likely will need to rely on things like error logs to debug which can be more time consuming.</description>
    </item>
    
    <item>
      <title>CAP Examples</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/9-nosql/2-cap-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/9-nosql/2-cap-examples/</guid>
      <description>CAP Examples Introduction In this exploration we are going to look at a couple real world examples of databases and discuss how they handle the constraints put forward in the CAP theorem. It would be a fair amount of work to configure these things to simply see them not work or to get the inconsistent results yourself, but you are welcome to give them a shot!
 MySQL We are going to talk about two different MySQL configurations.</description>
    </item>
    
    <item>
      <title>Common Data Formats</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/3-data-formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/3-data-formats/</guid>
      <description>Common Data Formats Introduction When working with APIs you might encounter several formats of data. Most commonly you will see JSON, XML and potentially some sort of format made for humans, like HTML or plain text. In this class the only data format you will need to work with is JSON so this will primarily serve as a quick refresher on JSON format.
JavaScript Object Notation This notation is more or less the same notation used to describe JavaScript Objects but it is somewhat more strict.</description>
    </item>
    
    <item>
      <title>MIME Types</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/2-mime-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/2-mime-types/</guid>
      <description>MIME Types Introduction This exploration looks at MIME (Multipurpose Internet Mail Extensions) types, also known as media types. You should have a vague understanding of these maybe from CS290. At least you have probably seen them in a request or response here and there. They typically look something like text/html or application/json.
These MIME types help the client and server negotiate what data is going to be sent and received.</description>
    </item>
    
    <item>
      <title>Demo of REST API Use</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/4-use-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/4-use-demo/</guid>
      <description>Demo of REST API Use Introduction We are going to walk through using a real live API to see what it practically looks like to do these sorts of tasks. This video uses the Box API reference as a guide when it comes to setting up the calls. This API is well documented and shows examples for every call. The Postman API tool is used to interact with the API via a somewhat graphical interface.</description>
    </item>
    
    <item>
      <title>Docker Files</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/3-docker-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/3-docker-files/</guid>
      <description>Docker Files Introduction We have so far taken a good look at how to get images and how to make containers from them. What we haven&amp;rsquo;t really looked at is how we can make our own images. To do that we need to use Docker files. These files specify the steps required to create an image. It will include things like picking a base image, copying files into the image and running commands within the image.</description>
    </item>
    
    <item>
      <title>Google App Engine and Node.js</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/3-gae-node-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/3-gae-node-basics/</guid>
      <description>Google App Engine and Node.js Introduction It can be difficult getting a new tool or library up or running. I would encourage you to try this weeks assignment without going through this section. Once you depart school and are working professionally you likely will be tasked with sometimes setting up new projects from scratch. This is often a challenging task as knowing where to start can be hard to figure out.</description>
    </item>
    
    <item>
      <title>RESTful Relationships</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/3-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/3-relationships/</guid>
      <description>RESTful Relationships Introduction In principle, relationships are not that new or exciting when dealing with a REST API. The same sorts of relationships still exist like they do in a standard relational database. We have one-to-one, one-to-many and many-to-many relationships.
That said, there are some interesting choices we need to make when returning results.
Basic Relationships Lets return to our lodging API. /lodgings/:id/guests could very reasonably be expected to return the lists of guests for a particular lodging.</description>
    </item>
    
    <item>
      <title>Status Codes and Content Types in Node</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/3-nodejs-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/3-nodejs-implementation/</guid>
      <description>Status Codes and Content Types in Node Introduction This looks at the tools at your disposal in Node.js to implement the proper use of status codes and content types. We will go through setting response codes, messages and setting and reading response and request headers.
Setting Status Codes Using Node.js and Express.js it is very simple to set the response status code. You simply call the response objects status method.</description>
    </item>
    
    <item>
      <title>Tools and Software Setup</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/4-tools-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/1-course-rest-cloud-overview/4-tools-setup/</guid>
      <description>Tools and Software Setup Introduction There are a few tools and providers we will need to work with throughout this class. In this section we are going to get them set up and working so we know, down the road, that we don&amp;rsquo;t need to worry about getting any of this configured and we can focus on the topics at hand.
Postman Setting this one up is pretty straight forward.</description>
    </item>
    
    <item>
      <title>Demo of Intermediate REST API Features</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/4-use-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/4-more-rest-api-creation/4-use-demo/</guid>
      <description>Demo of Intermediate REST API Features Introduction This video looks at the lodging application as it is being updated to include more intermediate features. The Gist with the code sample can be found here. This isn&amp;rsquo;t a complete and functioning API, it is only built to showcase some important features and show how to do some specific tasks using Node.js and Google App Engine.
Lodging v2 Overview  Review Between the complete examples in the Google App Engine documentation and this walkthrough that addresses some of the points that are not really hit on in the Google documentation you should be in a position where you can set up simple relationships, implement one-way paging using a cursor and implement links within an API.</description>
    </item>
    
    <item>
      <title>Docker on the Cloud</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/4-docker-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/8-docker/4-docker-cloud/</guid>
      <description>Docker on the Cloud Introduction So now we have worked with some Docker containers locally and have made some docker images ourselves. Now we need to look at how we can go beyond using these things locally on our computer and instead figure out how to deploy them onto some variety of cloud service.
Google Container Registry Many cloud providers provide a place to store containers, images or Dockerfiles. Getting the file to the Google Container Store should be pretty easy.</description>
    </item>
    
    <item>
      <title>Google App Engine and Python</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/4-gae-python-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/4-gae-python-basics/</guid>
      <description>Google App Engine and Python Introduction Ther are a lot of similarities between the process for the Python application and the Node.js application.
Once you have the Google Cloud tools installed (which is the same process regardless of Node.js or Python) you might want to go through steps 1-4 of the Python getting started tutorial.
This guide will get you the very basics of the datastore set up and give you an API referece.</description>
    </item>
    
  </channel>
</rss>