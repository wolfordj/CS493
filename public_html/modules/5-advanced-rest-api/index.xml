<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced REST API Concepts on CS 493</title>
    <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/</link>
    <description>Recent content in Advanced REST API Concepts on CS 493</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced API Topics</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/1-request-specifics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/1-request-specifics/</guid>
      <description>Advanced API Topics Introduction At the point we should have a pretty good idea of how to generate the bulk of a typical request that is well formatted. But a lot of APIs go beyond this in terms of what they implement. Any good REST API should use status codes to communicate what is going on. In addition we will start paying attention to the Accept header and returning different sorts of data.</description>
    </item>
    
    <item>
      <title>MIME Types</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/2-mime-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/2-mime-types/</guid>
      <description>MIME Types Introduction This exploration looks at MIME (Multipurpose Internet Mail Extensions) types, also known as media types. You should have a vague understanding of these maybe from CS290. At least you have probably seen them in a request or response here and there. They typically look something like text/html or application/json.
These MIME types help the client and server negotiate what data is going to be sent and received.</description>
    </item>
    
    <item>
      <title>Status Codes and Content Types in Node</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/3-nodejs-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/5-advanced-rest-api/3-nodejs-implementation/</guid>
      <description>Status Codes and Content Types in Node Introduction This looks at the tools at your disposal in Node.js to implement the proper use of status codes and content types. We will go through setting response codes, messages and setting and reading response and request headers.
Setting Status Codes Using Node.js and Express.js it is very simple to set the response status code. You simply call the response objects status method.</description>
    </item>
    
  </channel>
</rss>