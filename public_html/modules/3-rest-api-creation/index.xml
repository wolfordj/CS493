<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST API Creation on CS 493</title>
    <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/</link>
    <description>Recent content in REST API Creation on CS 493</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deciding on URLs</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/1-url-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/1-url-selection/</guid>
      <description>Deciding on URLs Introduction In this section we return to the concept of resources representing URLs. We are going to talk in some more detail about what this means and how it is applied to a web application. Everything in this section will assume the data is stored as a simple JSON representation. For our example we are going to to use a lodging provider that has provides lodgings to guests.</description>
    </item>
    
    <item>
      <title>Objects in Good API Design</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/2-oo-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/2-oo-practices/</guid>
      <description>Objects in Good API Design Introduction REST APIs lend themselves well to object oriented design. We are mainly using JavaScript in this class with Node.js, so it may not be quite as clean as it would be in something like C#, but the same principles will sill apply, so lets take a look!
What are the main Types? From the last section, we know there are broadly two sorts of things we will be dealing with.</description>
    </item>
    
    <item>
      <title>Google App Engine and Node.js</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/3-gae-node-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/3-gae-node-basics/</guid>
      <description>Google App Engine and Node.js Introduction It can be difficult getting a new tool or library up or running. I would encourage you to try this weeks assignment without going through this section. Once you depart school and are working professionally you likely will be tasked with sometimes setting up new projects from scratch. This is often a challenging task as knowing where to start can be hard to figure out.</description>
    </item>
    
    <item>
      <title>Google App Engine and Python</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/4-gae-python-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/3-rest-api-creation/4-gae-python-basics/</guid>
      <description>Google App Engine and Python Introduction Ther are a lot of similarities between the process for the Python application and the Node.js application.
Once you have the Google Cloud tools installed (which is the same process regardless of Node.js or Python) you might want to go through steps 1-4 of the Python getting started tutorial.
This guide will get you the very basics of the datastore set up and give you an API referece.</description>
    </item>
    
  </channel>
</rss>