<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST API Usage on CS 493</title>
    <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/</link>
    <description>Recent content in REST API Usage on CS 493</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to REST</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/1-rest-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/1-rest-intro/</guid>
      <description>Introduction to REST Introduction Representational State Transfer, much more commonly called REST is a very specific way of designing an API. The core concept of a REST Web API is that all the URLs identify resources, we will talk about this in some depth. Another important aspect of REST Web APIs is that they are stateless. The server does not store any information about the current state of a client.</description>
    </item>
    
    <item>
      <title>HTTP Verbs</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/2-http-verbs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/2-http-verbs/</guid>
      <description>HTTP Verbs Introduction Verbs are the key to letting us interact with REST APIs. Before we had mentioned that https://example.com/class/1/student/5 might refer to a student with an ID of 5 enrolled in a class with an id of 1. Broadly speaking there are 4 major things we could do at this point. We could create a new thing and add it to the student, maybe an assignment for example. We could read the data about the student or the class in the database.</description>
    </item>
    
    <item>
      <title>Common Data Formats</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/3-data-formats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/3-data-formats/</guid>
      <description>Common Data Formats Introduction When working with APIs you might encounter several formats of data. Most commonly you will see JSON, XML and potentially some sort of format made for humans, like HTML or plain text. In this class the only data format you will need to work with is JSON so this will primarily serve as a quick refresher on JSON format.
JavaScript Object Notation This notation is more or less the same notation used to describe JavaScript Objects but it is somewhat more strict.</description>
    </item>
    
    <item>
      <title>Demo of REST API Use</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/4-use-demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/4-use-demo/</guid>
      <description>Demo of REST API Use Introduction We are going to walk through using a real live API to see what it practically looks like to do these sorts of tasks. This video uses the Box API reference as a guide when it comes to setting up the calls. This API is well documented and shows examples for every call. The Postman API tool is used to interact with the API via a somewhat graphical interface.</description>
    </item>
    
    <item>
      <title>API Testing</title>
      <link>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/5-api-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://classes.engr.oregonstate.edu/eecs/perpetual/cs493-400/modules/2-rest-api-use/5-api-testing/</guid>
      <description>API Testing Introduction This module will look at the more practical aspects of writing API tests with the Postman testing too.
Good Practices When creating a testing suite there are some things to consider to make your work more streamlined and thorough.
Assume nothing When testing an API it is best to approach developing a testing suite without any preconceived notions. This means a few things:
 You cannot assume anything about the API works correctly so you must test even the most basic functionality Your testing suite should be data/state agnostic, meaning it runs no matter the current state of data on the server   Start small As mentioned above, you must begin by testing the most basic functionalities of an API.</description>
    </item>
    
  </channel>
</rss>